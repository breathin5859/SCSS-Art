@use "sass:list";
@use "../abstracts/" as *;

%iconButton {
  display: inline-block;
  width: rem(40);
  height: rem(40);

  .header & {
    width: rem(54);
    height: rem(55.833);
    padding: rem(15);
  }
}

// 버튼 사이즈  정의
$buttonSize: (
  1: (
    "className": ".sm",
    "height": 40,
    "paddingInline": 40,
    "borderWidth": 1,
    "fontSize": 20,
    "fontWeight": 700,
  ),
  2: (
    "className": ".base",
    "height": 56,
    "paddingInline": 40,
    "borderWidth": 1,
    "fontSize": 20,
    "fontWeight": 700,
  ),
  3: (
    "className": ".light",
    "height": auto,
    "paddingInline": 30,
    "borderWidth": 1,
    "fontSize": 16,
    "fontWeight": 400,
  ),
);

// 버튼 색상 정의
$buttonColor: (
  1: (
    "className": ".white",
    "bgColor": $grayscale-background,
    "borderImage": $gradient-accent,
    "borderImageSlice": 1,
    "color": $grayscale-label,
  ),
  2: (
    "className": ".white-round",
    "bgColor": $grayscale-background,
    "bgImage": $gradient-border,
    "bgOrigin": border-box,
    "bgClip": (
      padding-box,
      border-box,
    ),
    "borderColor": transparent,
    "color": $grayscale-label,
  ),
  3: (
    "className": ".gradient",
    "bgImage": $gradient-accent,
    "border": none,
    "color": $grayscale-off-white,
  ),
);
// 버튼 아이콘정의
$buttonIcon: (
  1: (
    "className": ".ico1",
    "direction": after,
    "imgName": "ico_fav_off.svg",
    "width": 20,
    "height": 20,
  ),
  2: (
    "className": ".ico2",
    "direction": after,
    "imgName": "ico_fav_on.svg",
    "width": 20,
    "height": 20,
  ),
  3: (
    "className": ".ico3",
    "direction": after,
    "imgName": "ico_export.svg",
    "width": 20,
    "height": 20,
  ),
);

@mixin buttonSize($varName, $index) {
  &#{map-get($varName, $index, className)} {
    height: rem(map-get($varName, $index, height));
    padding-inline: rem(map-get($varName, $index, paddingInline));
    border: rem(map-get($varName, $index, borderWidth)) solid;
    font-size: rem(map-get($varName, $index, fontSize));
    font-weight: map-get($varName, $index, fontWeight);
  }
}
@mixin buttonColor($varName, $index) {
  &#{map-get($varName, $index, className)} {
    background-color: map-get($varName, $index, bgColor);
    background-image: map-get($varName, $index, bgImage);
    background-origin: map-get($varName, $index, bgOrigin);
    background-clip: map-get($varName, $index, bgClip);
    border: map-get($varName, $index, border);
    border-color: map-get($varName, $index, borderColor);
    border-image: map-get($varName, $index, borderImage);
    border-image-slice: map-get($varName, $index, borderImageSlice);
    color: map-get($varName, $index, color);
  }
}
@mixin buttonIcon($varName, $index) {
  &#{map-get($varName, $index, className)} {
    &::#{map-get($varName, $index, direction)} {
      @include background(map-get($varName, $index, imgName), center);
      content: "";
      width: rem(map-get($varName, $index, width));
      height: rem(map-get($varName, $index, height));
    }
  }
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;

  @for $index from 1 through list.length($buttonSize) {
    @include buttonSize($buttonSize, $index);
  }
  @for $index from 1 through list.length($buttonColor) {
    @include buttonColor($buttonColor, $index);
  }
  @for $index from 1 through list.length($buttonIcon) {
    @include buttonIcon($buttonIcon, $index);
  }

  &.fullsize {
    width: 100%;
  }

  // 아이콘만
  &-menu {
    @include background("ico_menu.svg", center);
    @extend %iconButton;
  }
  &-search {
    @include background("ico_search.svg", center);
    @extend %iconButton;
  }
  &-external {
    @include background("ico_external.svg", center);
    @extend %iconButton;
    padding: rem(15);
  }

  &-group {
    display: grid;

    .footer & {
      gap: rem(16);
    }

    &2 {
      button {
        padding: rem(10);
        background-color: $grayscale-off-white;
      }
    }
  }
}
